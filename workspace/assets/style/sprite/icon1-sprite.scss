// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$icon1-pepe2-name: 'icon1-pepe2';
$icon1-pepe2-x: 0px;
$icon1-pepe2-y: 0px;
$icon1-pepe2-offset-x: 0px;
$icon1-pepe2-offset-y: 0px;
$icon1-pepe2-width: 512px;
$icon1-pepe2-height: 398px;
$icon1-pepe2-total-width: 762px;
$icon1-pepe2-total-height: 648px;
$icon1-pepe2-image: '../images/sprite/icon1.png';
$icon1-pepe2: (0px, 0px, 0px, 0px, 512px, 398px, 762px, 648px, '../images/sprite/icon1.png', 'icon1-pepe2', );
$icon1-star1-name: 'icon1-star1';
$icon1-star1-x: 522px;
$icon1-star1-y: 0px;
$icon1-star1-offset-x: -522px;
$icon1-star1-offset-y: 0px;
$icon1-star1-width: 240px;
$icon1-star1-height: 240px;
$icon1-star1-total-width: 762px;
$icon1-star1-total-height: 648px;
$icon1-star1-image: '../images/sprite/icon1.png';
$icon1-star1: (522px, 0px, -522px, 0px, 240px, 240px, 762px, 648px, '../images/sprite/icon1.png', 'icon1-star1', );
$icon1-star2-name: 'icon1-star2';
$icon1-star2-x: 0px;
$icon1-star2-y: 408px;
$icon1-star2-offset-x: 0px;
$icon1-star2-offset-y: -408px;
$icon1-star2-width: 240px;
$icon1-star2-height: 240px;
$icon1-star2-total-width: 762px;
$icon1-star2-total-height: 648px;
$icon1-star2-image: '../images/sprite/icon1.png';
$icon1-star2: (0px, 408px, 0px, -408px, 240px, 240px, 762px, 648px, '../images/sprite/icon1.png', 'icon1-star2', );
$icon1-star3-name: 'icon1-star3';
$icon1-star3-x: 250px;
$icon1-star3-y: 408px;
$icon1-star3-offset-x: -250px;
$icon1-star3-offset-y: -408px;
$icon1-star3-width: 240px;
$icon1-star3-height: 240px;
$icon1-star3-total-width: 762px;
$icon1-star3-total-height: 648px;
$icon1-star3-image: '../images/sprite/icon1.png';
$icon1-star3: (250px, 408px, -250px, -408px, 240px, 240px, 762px, 648px, '../images/sprite/icon1.png', 'icon1-star3', );
$icon1-width: 762px;
$icon1-height: 648px;
$icon1-image: '../images/sprite/icon1.png';
$icon1-sprites: ($icon1-pepe2, $icon1-star1, $icon1-star2, $icon1-star3, );
$icon1: (762px, 648px, '../images/sprite/icon1.png', $icon1-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
